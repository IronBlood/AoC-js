import { describe, it, expect } from '@jest/globals';
import {
	longest_hike,
	find_warp_points,
	longest_hike_fast,
} from "./lib.js";

describe("2023-12-23", () => {
	const testcases = [
		[`
#.#####################
#.......#########...###
#######.#########.#.###
###.....#.>.>.###.#.###
###v#####.#v#.###.#.###
###.>...#.#.#.....#...#
###v###.#.#.#########.#
###...#.#.#.......#...#
#####.#.#.#######.#.###
#.....#.#.#.......#...#
#.#####.#.#.#########v#
#.#...#...#...###...>.#
#.#.#v#######v###.###v#
#...#.>.#...>.>.#.###.#
#####v#.#.###v#.#.###.#
#.....#...#...#.#.#...#
#.#########.###.#.#.###
#...###...#...#...#.###
###.###.#.###v#####v###
#...#...#.#.>.>.#.>.###
#.###.###.#.###.#.#v###
#.....###...###...#...#
#####################.#`, 94, 154],
	];
	for (let i = 0; i < testcases.length; i++) {
		it(`test-${i}`, () => {
			const tc = testcases[i];
			expect(longest_hike(tc[0].trim())).toBe(tc[1]);
			expect(longest_hike(tc[0].trim(), 2)).toBe(tc[2]);
		});
	}
});

describe("2023-12-23 p2-ut_check_warp_point", () => {
	const grid = `
#.#####################
#.......#########...###
#######.#########.#.###
###.....#.>.>.###.#.###
###v#####.#v#.###.#.###
###.>...#.#.#.....#...#
###v###.#.#.#########.#
###...#.#.#.......#...#
#####.#.#.#######.#.###
#.....#.#.#.......#...#
#.#####.#.#.#########v#
#.#...#...#...###...>.#
#.#.#v#######v###.###v#
#...#.>.#...>.>.#.###.#
#####v#.#.###v#.#.###.#
#.....#...#...#.#.#...#
#.#########.###.#.#.###
#...###...#...#...#.###
###.###.#.###v#####v###
#...#...#.#.>.>.#.>.###
#.###.###.#.###.#.#v###
#.....###...###...#...#
#####################.#`.trim().split("\n").map(line => line.split(""));

	const warp_points_normal = [
		[1,1],
		[1,7],
		[1,17],
		[1,19],
		[3,3],
		[3,7],
		[3,9],
		[3,11],
		[3,13],
		[5,3],
		[5,7],
		[5,13],
		[5,17],
		[5,19],
		[5,21],
		[7,3],
		[7,5],
		[7,11],
		[7,17],
		[7,19],
		[7,21],
		[9,1],
		[9,5],
		[9,11],
		[9,17],
		[9,19],
		[9,21],
		[11,3],
		[11,5],
		[11,7],
		[11,9],
		[11,11],
		[11,13],
		[11,17],
		[11,21],
		[13,1],
		[13,3],
		[13,5],
		[13,7],
		[13,9],
		[13,13],
		[13,15],
		[15,1],
		[15,5],
		[15,7],
		[15,9],
		[15,11],
		[15,13],
		[15,19],
		[15,21],
		[17,1],
		[17,3],
		[17,7],
		[17,9],
		[17,11],
		[17,13],
		[17,15],
		[17,17],
		[19,1],
		[19,3],
		[19,5],
		[19,7],
		[19,11],
		[19,13],
		[19,15],
		[19,17],
		[19,19],
		[21,1],
		[21,5],
		[21,9],
		[21,11],
		[21,15],
		[21,17],
		[21,19],
		[21,21],
	];

	const warp_points_slope = [
		[3,10],
		[3,12],
		[4,3],
		[4,11],
		[5,4],
		[6,3],
		[10,21],
		[11,20],
		[12,5],
		[12,13],
		[12,21],
		[13,6],
		[13,12],
		[13,14],
		[14,5],
		[14,13],
		[18,13],
		[18,19],
		[19,12],
		[19,14],
		[19,18],
		[20,19],
	];

	it("warp points part 1", () => {
		const points = find_warp_points(grid, 1);
		expect(points.length).toBe(warp_points_normal.length + warp_points_slope.length);
		for (const [x, y] of warp_points_normal) {
			expect(points.find(p => p.x === x && p.y === y)).not.toBeUndefined();
		}
		for (const [x, y] of warp_points_slope) {
			expect(points.find(p => p.x === x && p.y === y)).not.toBeUndefined();
		}
	});

	it("warp points part 2", () => {
		const points = find_warp_points(grid, 2);
		expect(points.length).toBe(warp_points_normal.length);
		for (const [x, y] of warp_points_normal) {
			expect(points.find(p => p.x === x && p.y === y)).not.toBeUndefined();
		}
	});
});

describe("2023-12-23 fast", () => {
	const testcases = [
		[`
#.#####################
#.......#########...###
#######.#########.#.###
###.....#.>.>.###.#.###
###v#####.#v#.###.#.###
###.>...#.#.#.....#...#
###v###.#.#.#########.#
###...#.#.#.......#...#
#####.#.#.#######.#.###
#.....#.#.#.......#...#
#.#####.#.#.#########v#
#.#...#...#...###...>.#
#.#.#v#######v###.###v#
#...#.>.#...>.>.#.###.#
#####v#.#.###v#.#.###.#
#.....#...#...#.#.#...#
#.#########.###.#.#.###
#...###...#...#...#.###
###.###.#.###v#####v###
#...#...#.#.>.>.#.>.###
#.###.###.#.###.#.#v###
#.....###...###...#...#
#####################.#`, 94, 154],
	];
	for (let i = 0; i < testcases.length; i++) {
		it(`test-${i}`, () => {
			const tc = testcases[i];
			expect(longest_hike_fast(tc[0].trim())).toBe(tc[1]);
			expect(longest_hike_fast(tc[0].trim(), 2)).toBe(tc[2]);
		});
	}
});
